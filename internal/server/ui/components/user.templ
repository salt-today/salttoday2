package components

import (
	"fmt"
	"math"

	"github.com/salt-today/salttoday2/internal/store"
)

func getOrderPercentage(userNum, topUserNum int32) int {
	percentage := float64(userNum) / float64(topUserNum)
	nearest := Round(percentage, 0.01) - 1

	// minus 1 stops the top score being broken into two bars
	return int(nearest * 100)
}
func Round(num, unit float64) float64 {
	return math.Round(num/unit) * unit
}

templ scoreBar(displayNum, userNum, topUserNum int32, colour string) {
	<span
		class={ fmt.Sprintf("w-[%d%%] inline-block h-10 p-2 %s rounded m-0.5", getOrderPercentage(userNum, topUserNum),
  colour) }
	>
		{ fmt.Sprintf("%d", int(displayNum)) }
	</span>
}

templ UserComponent(user *store.User, orderBy int, topUser *store.User) {
	<tr>
		<td class="text-nowrap text-end">
			<a href={ templ.URL(fmt.Sprintf("/user/%d", user.ID)) } class="hover:underline text-decoration-2">
				{ user.UserName }
			</a>
		</td>
		<td class="w-full">
			if orderBy == store.OrderByLikes {
				@scoreBar(user.TotalLikes, user.TotalLikes, topUser.TotalLikes, "bg-blue-600")
			} else if orderBy == store.OrderByDislikes {
				@scoreBar(user.TotalDislikes, user.TotalDislikes, topUser.TotalDislikes, "bg-red-600")
			} else {
				<div class="">
					@scoreBar(user.TotalLikes, user.TotalLikes, topUser.TotalScore, "bg-blue-600")
					@scoreBar(user.TotalDislikes, user.TotalDislikes*2, topUser.TotalScore, "bg-red-600")
				</div>
			}
		</td>
	</tr>
}
